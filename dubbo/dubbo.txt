----------------------------------Spring部分 ------------------------------------

Environment 
    profile
    servlet params info
    conversionService

Context
    factories
    environment
    beanFactory
    BeanDefinitionReader
    BeanDefinitionScanner

BeanFactory
    singletonObjects
    beanClassLoader
    beanDefinitionNames
    beanDefinitionMap
    resolvableDependencies




ServiceBean 与 UserService 之间有关系
org.springframework.beans.factory.support.AbstractBeanFactory#mergedBeanDefinitions 去维系的

ServiceBean 的 afterPropertiesSet 方法
通过org.springframework.beans.factory.BeanFactoryUtils#beansOfTypeIncludingAncestors()方法从spring 的上下文中获取的






org.springframework.boot.SpringApplication#run(java.lang.String...) —— springboot 核心run 方法

run
    创建 Environment
    创建 ApplicationContext - AnnotationConfigServletWebServerApplicationContext
        创建 BeanDefinitionReader 和 BeanDefinitionScanner
        创建 BeanDefinitionLoader
        BeanDefinitionLoader.load() 把启动类加入 beanDefinitionMap
        创建 BeanFactory - DefaultListableBeanFactory
    refresh
        1、prepareRefresh：
            添加listenter
        2、obtainFreshBeanFactory 
            是否需要刷新 beanFactory
        3、prepareBeanFactory：给 beanFactory 设置一些属性
            设置 beanFactory 的类加载器
            设置 beanPostProcessors ApplicationContextAwareProcessor 在创建bean之前将 applictionContext设置进去。beanPostProcessors 是集合
            将 EnvironmentAware、EmbeddedValueResolverAware、ResourceLoaderAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware  取消自动注入，因为ApplicationContextAwareProcessor把这5个接口的实现工作做了
            设置 beanFactory 的 resolvableDependencies 
        4、invokeBeanFactoryPostProcessors 执行 beanFactory 的后处理
            在Spring容器中找出实现了BeanFactoryPostProcessor接口的processor并执行。Spring容器会委托给PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法执行
                【核心】循环 beanFactoryPostProcessors，进行调用各自的 postProcessBeanDefinitionRegistry（这里核心是 【ConfigurationClassPostProcessor】）
                
                // BeanDefinition注册的后处理器操作
                从 beanFactory中的 【beanDefinitionNames 和 manualSingletonNames】 获取 BeanDefinitionRegistryPostProcessor(ConfigurationClassPostProcessor)，并设置到 beanFactory 的相关集合中
                循环 上一步获取的processor集合，如果匹配PriorityOrdered，则进行后处理调用
                进行排序 currentRegistryProcessors
                加到registryProcessors中
                进行currentRegistryProcessors循环调用后处理 postProcessBeanDefinitionRegistry
                    【核心】ConfigurationClassPostProcessor 作为 BeanDefinitionRegistryPostProcessor 的实现类，执行后处理逻辑
                    org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass

                        parser.parse 解析
                             // step 1:
                            如果是注解解析器，如果主触发类上包含 @ComponentScans注解，ConfigurationClassParse 触发扫描所有 component 
                            将扫描到的 bean 注册入 beanFactory 的 beanDefinitionMap 中
                                比如：当前工程自身的 UserService

                        loadBeanDefinition 加载

                            // step 1: 如果是 
                            registerBeanDefinitionForImportedConfigurationClass

                            // step 2: 遍历所有方法
                            loadBeanDefinitionsForBeanMethod

                            // step 3: loadBeanDefinitionsFromImportedResources —— 加载从 rsource中的配置文件中解析的类
                                // step 3.1: 获取解析器
                                获取所有 xml 文件路径
                                    org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsFromImportedResources 获取从 resources 中引入的配置文件信息，此处已经通过  DubboUserApplication 的 @ImportResource 注解获取到 resource 中配置文件的位置
                                        通过 Element 元素，获取到 namespaceUri 的全名称 —— http://code.alibabatech.com/schema/dubbo
                                        在 org.springframework.beans.factory.xml.BeanDefinitionParserDelegate#parseCustomElement方法中 通过 namespaceUri 获取到 对应的 NamespaceHandler —— DubboNamespaceHandler
                                            org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver#resolve 通过对应的 namespaceUri 获取对应的 NamespaceHandler 全类名
                                                然后创建 NamespaceHandler 对象，此处的实际对象是 DubboNamespaceHandler
                                                    执行 DubboNamespaceHandler 的 init 方法
                                                        创建所有 dubbo 标签对应的Config 类的 DubboBeanDefinitionParser
                                                            如：dubbo:registry，对应 beanClass 为 RegistryConfig 的 DubboBeanDefinitionParser
                                                            如：dubbo:provider，对应 beanClass 为 ProviderConfig 的 DubboBeanDefinitionParser
                                                            如：dubbo:consumer，对应 beanClass 为 ConsumerConfig 的 DubboBeanDefinitionParser
                                                            等...
                                                        然后将 DubboBeanDefinitionParser 和 对应的 dubbo 标签类注册到 NamespaceHandlerSupport 的 parsers 中
                                                保存到 handlerMappings 中

                                // step 3.2: 解析 xml
                                根据标签的 element ，获取对应的parser
                                    比如：通过dubbo:service 获取 DubboBeanDefinitionParser, 其中的 beanClass 是 ServiceBean
                                    此处解析出来的 bean 结果就是 ServiceBean，其中 ServiceBean 对应的是当前项目提供的服务提供者的类，就是配置的类，（此处是 UserService 的全类名）。在这一步会将自己的服务的 class 与 dubbo 的 ServiceBean 关系绑定起来

                                    比如：通过dubbo:refrence 获取 DubboBeanDefinitionParser，其中的 beanClass 是 RefrenceBean
                                    此处解析出来的 bean 结果就是 RefrenceBean，其中 RefrenceBean 对应的是当前项目锁引用的 dubbo 服务的类，就是配置的类，（此处是 OrderService 的全类名）。在这一步会将引用的 dubbo 服务的 class 与 dubbo 的 ReferenceBean 关系绑定起来

                                    ps：此处启动的是 UserService 对应的工程，所以 UserService 描述为 provider；而 OrderService 作为当前工程引用的 dubbo 服务，所以此处描述为 consumer

                                // step 3.3: 加载 beanDefinition
                                将解析出来的bean信息封装成 beanDefinition 加入beanDefinitionMap中

                            // step 4: loadBeanDefinitionsFromRegistrars

                清空 currentRegistryProcessors

                // BeanDefinition注册的后处理器操作
                再次 从 beanFactory中的 【beanDefinitionNames 和 manualSingletonNames】 获取 BeanDefinitionRegistryPostProcessor(ConfigurationClassPostProcessor)，并设置到 beanFactory 的相关集合中
                循环 上一步获取的processor集合，如果匹配Ordered，则进行后处理调用
                进行排序 currentRegistryProcessors
                加到registryProcessors中
                进行currentRegistryProcessors循环调用后处理 postProcessBeanDefinitionRegistry
                清空 currentRegistryProcessors

                // BeanFactory 的后处理器操作

            【兜底操作？】

        5、registerBeanPostProcessors
            从beanFactory中的 【beanDefinitionNames 和 manualSingletonNames】获取 beanFactory 的所有 BeanPostProcessor
            按照优先级分类，归到不同的集合当中
            进行排序
            进行注册
                将 BeanPostProcessor 加入到 beanFacotry 中的 beanPostProcessors
        6、initMessageSource
        7、initApplicationEventMulticaster
            创建【event multicaster】，并注册到 beanFactory 的 singletonObjects
        8、onRefresh
            创建 webServer
            初始化属性
        9、registerListeners
            给 EventMulticaster 注册上所有的 listners
            从 beanFactory 中获取所有的 ApplicationListener 对象，添加到 listener 集合中
        10、finishBeanFactoryInitialization
            从beanFactory中的 【beanDefinitionNames 和 manualSingletonNames】获取 beanFactory 的所有 LoadTimeWeaverAware
            【核心 —— bean 的生命周期】preInstantiateSingletons 创建剩余的bean 
                遍历 beanDefinitionNames 
                    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation —— 执行 InstantiationAwareBeanPostProcessorAdapter 实例化对象前操作
                    createBeanInstance 实例化bean
                        默认无参构造
                    populateBean 填充bean
                        执行 InstantiationAwareBeanPostProcessorAdapter 的设置属性方法和实例化后方法
                        得到所有的 InstantiationAwareBeanPostProcessor，遍历执行 postProcessProperties 方法
                            通过反射获取 @Resource 修饰的属性（org.springframework.context.annotation.CommonAnnotationBeanPostProcessor#buildResourceMetadata），然后还是通过getBean获取到对象，然后进行注入 

                    initializeBean 初始化bean
                        BeanNameAware 的 setBeanName
                        BeanFactoryAware 的 setBeanFactory
                        ApplicationContextAware 的 setApplicationContext
                        InstantiationAwareBeanPostProcessorAdapter 的 postProcessBeforeInitialization
                        InstantiationAwareBeanPostProcessorAdapter 的 postProcessAfterInitialization
                    添加到 singletonObjects
        11、finishRefresh
            initLifecycleProcessor
                创建【LifecycleProcessor】，并设置到 beanFactory 中
            onRefresh
            publishEvent 发布 finish 的事件 【ContextRefreshedEvent】
                获取所有 application lisenter
                执行 lisenter 的 onApplicationEvent 方法（dubbo 服务暴露的入口）




bean 声明周期
BeanFactoryPostProcessor
InstantiationAwareBeanPostProcessorAdapter
BeanPostProcessor

bean 生命周期核心部分 —— org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean





疑点:
1、MergedBeanDefinition 的概念，userService 是如何跟 ServiceBean 建立关系的？
2、一系列复杂的 PostProcessor 的处理
3、singletonObject 是从哪里塞入的
4、ServiceBean 是从何时进入 listner的集合当中的？
5、何时塞入 beanFactory 中的 beanDefinitionMap 的？
6、bean的声明周期
7、resolvableDependencies 是做什么用的？
8、DubboBeanDefinitionParser是如何参与进去的？
9、ServiceBean 是何时监听到事件的？
10、ServiceBean 和 RefrenceBean 的 getBean走的不是同一个？
11、为什么 RefenceBean 要实现 FactoryBean 接口？
12、FactoryBean 接口的意义是什么？
13、FactoryBean 的对象在何时加入 singletonObjects？为什么？


解决的问题：
1、ServiceBean 是 DubboBeanDefinitionPaser 里决定的
3、平常用的类在 finishBeanFactoryInitialization 里面塞的
5、何时塞入 beanFactory 中的 beanDefinitionMap 的？
    5.1、一些 postProcessor 会在 postProcessBeanFactory 的时候塞入
    5.2、普通的业务使用的一些bean，在invokeBeanFactoryPostProcessors中会进行扫描，然后加进去
6、已经搞定
8、 org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver#resolve 通过对应的 namespaceUri 获取对应的 NamespaceHandler 全类名
9、registerListeners 会将代表 userService 的 ServiceBean 注册到上下文中的监听器集合中，因为 ServiceBean 实现了 ApplicationListener 接口。当 finishRefresh 时会触发事件
10、
    RefrenceBean：
        org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String, java.lang.Class<T>)
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#getObjectForBeanInstance
    ServiceBean:
11、
    核心思想就是简化Bean实例化的过程：一般情况下，Spring通过反射机制利用的class属性指定实现类实例化Bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。FactoryBean接口对于Spring框架来说占用重要的地位，Spring自身就提供了70多个FactoryBean的实现。它们隐藏了实例化一些复杂Bean的细节，给上层应用带来了便利。从Spring3.0开始，FactoryBean开始支持泛型，即接口声明改为FactoryBean的形式
13、在这一点，FactoryBean 和普通 bean 相同，没什么分别




额外的知识：
给 beanFacotry 中加 BeanPostProcessor，在用 beanFactory getBean的时候会触发响应的方法







添加后处理：
invokeBeanFactoryPostProcessors 执行所有beanFactory后处理器

finishBeanFactoryInitialization
    实例化单例 执行 beanFactory 的 createBean
        实例化前操作
            在 beanFactory 中的 resolveBeforeInstantiation 遍历所有 InstantiationAwareBeanPostProcessor，执行 postProcessBeforeInstantiation 方法
            获取构造器
                获取构造器之前操作
                    在 beanFactory 中获取所有的 SmartInstantiationAwareBeanPostProcessor，执行 determineCandidateConstructors 方法
        实例化 bean 
            默认使用无参构造器，调用 BeanUtils.instantiateClass
        实例化后操作
            populateBean 填入内容
                在 beanFactory 中获取所有的 BeanUtils.instantiateClass
                    执行 postProcessAfterInstantiation 方法
                    执行 postProcessProperties 方法
            initializeBean 初始化 bean
                执行 BeanFactoryAware 接口的 setBeanFactory 方法
                从 beanFactory 中获取所有的 BeanPostProcessor，其中包含 ApplicationContextAwareProcessor ，执行它的 postProcessBeforeInitialization
                初始化完成，执行 bean 自己的 @PostConstruct
                执行 InitializingBean 的 afterPropertiesSet 方法
                从 beanFactory 中获取所有的 BeanPostProcessor，执行 postProcessAfterInitialization 方法

                






---------------------------------- dubbo部分 ------------------------------------

ServiceConfig（ServiceBean）跟服务是一对一的

服务暴露过程（拿 UserService 为例）
com.alibaba.dubbo.config.ServiceConfig#export
com.alibaba.dubbo.config.ServiceConfig#doExportUrls
    加载注册中心 —— com.alibaba.dubbo.config.AbstractInterfaceConfig#loadRegistries
        在Spring实例化 ServiceBean 的时候，会解析xml文件，此时就赋值给了它的registries
        遍历 registries，将注册中心全部转换称 URL 的形式 （registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-user&dubbo=2.6.1&pid=10944&registry=zookeeper&timestamp=1584865819108）
    循环 protocol（【疑点】此处 protocol 应该可以配置多个，这个确认一下。此处进行循环，就是所有的 protocol 都需要对当前dubbo服务进行暴露），进行暴露 com.alibaba.dubbo.config.ServiceConfig#doExportUrlsFor1Protocol
        准备一个 map，并将所有 dubbo 服务的配置都保存到map中
        生成当前 dubbo 服务的 URL（dubbo://192.168.1.102:20881/com.dubbo.example.api.UserService?anyhost=true&application=dubbo-user&bind.ip=192.168.1.102&bind.port=20881&dubbo=2.6.1&generic=false&interface=com.dubbo.example.api.UserService&methods=queryUserInfoList&pid=10944&revision=1.0.0&side=provider&timeout=18000&timestamp=1584865905681&version=1.0.0）
            创建与所有 registryURLs 的 Socket 链接
            连接后，将 bind.ip 保存到 host 中
        本地暴露 —— InjvmProtocol 进行暴露
            将 URL 转换后的 Invoker 保存到 InjvmExporter 中的 exporterMap 中
            ServiceConfig 中的 exporters 将返回的 exporter 添加到集合中
        远程暴露
            通过 proxyFactory 转换成 Invoker
            通过 protocol 进行 export
                RegistryProtocol 的 export
                    本地暴露
                    从 invoker 中获取 registry

                    // step 1: 添加到注册表中
                    将 provider 添加到注册表中  com.alibaba.dubbo.registry.support.ProviderConsumerRegTable#registerProvider

                    // step 2: register
                    【核心 - registry 的 register】进行注册 —— com.alibaba.dubbo.registry.integration.RegistryProtocol#register
                        将 当前 dubbo provider URL 添加到 AbstractRegistry 中的 registered
                        创建一个 URL 对应的 zk path，通过 zkClient 将其添加到 zk 中（创建一个 zk node） - com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry#doRegister

                    // step 3: subscribe
                    【核心 - register 的 subscribe】
                        将 当前 dubbo provider URL 添加到 AbstractRegistry 中的 subscribed
                        创建当前 dubbo provider URL 加到 ZookeeperRegistry 中的 zkListeners 
                            此处 zkListeners 的结构需要关注一下【核心知识点 —— 与 zookeeper 关联的监听事件】
                            通过 zkClient 把 dubbo provider path 在zk上创建一个 znode
                            通过 zkClient 对该 znode 添加监听器
                            ZookeeperRegistry【registry 的 notify】com.alibaba.dubbo.registry.support.AbstractRegistry#notify(com.alibaba.dubbo.common.URL, com.alibaba.dubbo.registry.NotifyListener, java.util.List<com.alibaba.dubbo.common.URL>)
                                获取 dubbo provider 的所有listener
                                    将注册信息保存到缓存中  com.alibaba.dubbo.registry.support.AbstractRegistry#saveProperties
                                        使用线程池，异步执行任务，将祖册信息保存到本地磁盘文件（文件位置：C:\Users\baowen.dong\.dubbo\dubbo-registry-dubbo-user-127.0.0.1:2181.cache）
                                    OverrideListener【核心 - NotifyListener 的 notify】通知每个 listenter
                                        对比 url 是否相同，如果不同，则进行重新 exprot
                DubboProtocl 的 export
                    将 invoker 转换成 DubboExporter，并保存到 DubboExporter 中的exporterMap 中
                    开启服务
                        通过 netty 开启服务【核心】
            ServiceConfig 中的 exporters 将返回的 exporter 添加到集合中



zookeeper的线程池再转
org.apache.zookeeper.ClientCnxn.EventThread 任务会去无限循环的调用，通知 cihldChanged 事件（是通过zk 的 watcher 通知的）




com.alibaba.dubbo.registry.support.FailbackRegistry#FailbackRegistry 中还有定时任务再转
通过一部future来进行




问题:
1、spring启动完成后都启动了 dubbo的那些东西？
2、服务提供者是如何注册到注册中心的？
3、每个服务的export过程都会加载一遍注册中心吗？
4、开启服务的netty方面的问题，具体是与谁通信？通信内容是什么？
5、dubbo 中的发布订阅模式具体是怎样的？谁去订阅谁？
6、ReferenceConfig在spring中是如何创建的？
7、ResgitstryService 的 subscribe(url, NotifyListener) 中的 NotifyListener到底是谁？

解答：
2、分两步：先注册到本地的服务注册表；然后通过 zkClient 在 zk 上创建对应的 znode




zkListeners 的结构 <Key,Value>
Key: URL，包括 provider 和 consumer
Value：ConcurrentHashMap
    Key：
    Value：